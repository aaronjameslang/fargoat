service: ${env:PROJECT_NAME}
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8

  stage: ${env:STAGE}
  region: ${env:REGION}

resources:
  Resources:
    vpc0:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 192.168.0.0/24
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-vpc0
          - Key: project
            Value: ${self:service}
    subnet0:
      Type: AWS::EC2::Subnet
      Properties:
        CidrBlock: 192.168.0.0/24
        MapPublicIpOnLaunch: true # Required for outgoing HTTP?
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-subnet0
          - Key: project
            Value: ${self:service}
        VpcId: !Ref vpc0
    igw0:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-igw0
          - Key: project
            Value: ${self:service}
    igwAttachment0:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref vpc0
        InternetGatewayId: !Ref igw0
    cluster0:
      Type: AWS::ECS::Cluster
      Properties:
        CapacityProviders: [FARGATE]
        ClusterName: ${self:service}-${self:provider.stage}-cluster0
        ClusterSettings:
          - Name: containerInsights
            Value: enabled
        Tags:
          - Key: project
            Value: ${self:service}
    repo0:
      Type: AWS::ECR::Repository
      Properties:
        ImageScanningConfiguration: { scanOnPush: true }
        ImageTagMutability: IMMUTABLE
        RepositoryName: ${self:service}-${self:provider.stage}
        # RepositoryPolicyText: # Needed for non-root push image
        Tags:
          - Key: project
            Value: ${self:service}
    taskDefinition0:
      Type: AWS::ECS::TaskDefinition
      Properties:
        ContainerDefinitions:
          - Image: ${env:ECR_IMG_URI}
            LogConfiguration:
              LogDriver: 'awslogs'
              Options:
                awslogs-group:  ${self:service}-${self:provider.stage}
                awslogs-region: ${env:REGION}
                awslogs-stream-prefix: ${self:service}-${self:provider.stage}
            Name: container0
            PortMappings:
              - ContainerPort: 5000
                HostPort: 5000
                Protocol: TCP
        Cpu: 256
        # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html#create-task-execution-role
        ExecutionRoleArn: arn:aws:iam::${env:ACCOUNT_ID}:role/ecsTaskExecutionRole
        Family: ${self:service}-${self:provider.stage}-taskDefinition0
        Memory: 512
        NetworkMode: awsvpc
        RequiresCompatibilities: [FARGATE]
        Tags:
          - Key: project
            Value: ${self:service}
    logGroup0:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: ${self:service}-${self:provider.stage}
    routeTable0:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref vpc0
    route0:
      Type: AWS::EC2::Route
      # DependsOn: igwAttachment0
      Properties:
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref igw0
        RouteTableId: !Ref routeTable0
    subnetRouteTableAssociation0:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref routeTable0
        SubnetId: !Ref subnet0
  Outputs:
    subnet0id:
      Value: !Ref subnet0
